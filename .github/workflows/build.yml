# github action,他是一个CI工具,当你把代码提交到像github central library时候,会做一些检查,检查的东西会在jobs内描述

name: build

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

permissions:
  contents: write

jobs:
  build-rust:
    strategy:
      matrix:
        # 平台检查
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      # 安装rust stable版本和llvm
      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview
      # 安装code coverage工具
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      # 安装nextest
      - name: install nextest
        uses: taiki-e/install-action@nextest
      # 安装rust cache:缓存上一个成功build的版本里面的dependency会cache起来,减少编译的这个过程
      - uses: Swatinem/rust-cache@v2
      # 代码格式化检查
      - name: Check code format
        run: cargo fmt -- --check
      # 基本的静态检查
      - name: Check the package for errors
        run: cargo check --all
      # lint检查,做lint检查会对所有的target,所有的feature,所有的tests,所有的benches做检查,如果出现warnings,会报错
      - name: Lint rust sources
        run: cargo clippy --all-targets --all-features --tests --benches -- -D warnings
      # 最后对所有features run nextest
      - name: Execute rust tests
        run: cargo nextest run --all-features
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        if: startsWith(github.ref, 'refs/tags/')
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.git-cliff.outputs.content }}

# 所有检查通过之后,这个build就完成了,当我们git tag的时候,会调用git cliff来生成对应的changelog,然后生成一个github release,然后把
# changelog放到release里面
